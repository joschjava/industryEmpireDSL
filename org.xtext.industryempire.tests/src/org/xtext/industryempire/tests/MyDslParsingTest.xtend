/*
 * generated by Xtext 2.13.0
 */
package org.xtext.industryempire.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.Test
import org.junit.runner.RunWith
import org.xtext.industryempire.myDsl.ClazzModel

@RunWith(XtextRunner)
@InjectWith(MyDslInjectorProvider)
class MyDslParsingTest {
	@Inject extension ParseHelper<ClazzModel>
	@Inject extension ValidationTestHelper
	
	
	@Test
	def void resourceTest(){
		'''
		Resources:
			FirstResource [cost -> 50]
			SecondResource [cost -> 100]
		'''.parse.assertNoErrors
	}
	
	@Test
	def void factoryTest(){
		'''
		
		Resources:
			FirstResource [cost -> 15]
			SecondResource [cost -> 15]
			
		Factories:
			testFactory [:]
			testFactory2 [in->FirstResource:out->SecondResource]
			
		Vehicles:
			test [speed -> 30]

		'''.parse.assertNoErrors
	}	
	
	@Test
	def void vehicleTest(){
		'''
		Vehicles:
			PowerLoader [speed->40:load->110:tankSize->42:fuelConsumption->2.3]
ллл		PowerSaver [speed->40:load->110:tankSize->42:fuelConsumption->0.6]
		'''.parse.assertNoErrors
	}
	
	
	
	@Test
	def void unresolvedProblems(){
				'''
		Resources:
			FirstResource [cost:50]
			SecondResource [cost:100]
			
		Factories:
			testFactory [FirstResource:SecondResource]
			testFactory2 [FirstResource:SecondResource]
			
		Cities: 
			Berlin [50:20:testFactory, testFactory2]
			BombedBerlin [50:20:]
		'''.parse.assertNoErrors
	}
	
	@Test
	def void doubleResourceTest(){
		'''
		Cities:
			Berlin [x->50:y->20:]
			
		Resources:
			FirstResource [cost -> 50]
			SecondResource [cost -> 100]
			
		Resources:
			ThirdResource [cost -> 50]
		'''.parse.assertNoErrors
	}
	
}
