/*
 * generated by Xtext 2.13.0
 */
package org.xtext.industryempire.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.industryempire.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.industryempire.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getDOUBLEAccess().getAlternatives_0(), "rule__DOUBLE__Alternatives_0");
					put(grammarAccess.getDOUBLEAccess().getAlternatives_2(), "rule__DOUBLE__Alternatives_2");
					put(grammarAccess.getCitiesAccess().getGroup(), "rule__Cities__Group__0");
					put(grammarAccess.getCitiesAccess().getGroup_10(), "rule__Cities__Group_10__0");
					put(grammarAccess.getVehiclesAccess().getGroup(), "rule__Vehicles__Group__0");
					put(grammarAccess.getFactoriesAccess().getGroup(), "rule__Factories__Group__0");
					put(grammarAccess.getSingleFactoryAccess().getGroup(), "rule__SingleFactory__Group__0");
					put(grammarAccess.getResourcesAccess().getGroup(), "rule__Resources__Group__0");
					put(grammarAccess.getDOUBLEAccess().getGroup(), "rule__DOUBLE__Group__0");
					put(grammarAccess.getClazzModelAccess().getElementAssignment(), "rule__ClazzModel__ElementAssignment");
					put(grammarAccess.getCitiesAccess().getNameAssignment_1(), "rule__Cities__NameAssignment_1");
					put(grammarAccess.getCitiesAccess().getXAssignment_4(), "rule__Cities__XAssignment_4");
					put(grammarAccess.getCitiesAccess().getYAssignment_7(), "rule__Cities__YAssignment_7");
					put(grammarAccess.getCitiesAccess().getFactoryAssignment_9(), "rule__Cities__FactoryAssignment_9");
					put(grammarAccess.getCitiesAccess().getFactoryAssignment_10_1(), "rule__Cities__FactoryAssignment_10_1");
					put(grammarAccess.getVehiclesAccess().getVehiclesAssignment_2(), "rule__Vehicles__VehiclesAssignment_2");
					put(grammarAccess.getSingleVehicleAccess().getNameAssignment(), "rule__SingleVehicle__NameAssignment");
					put(grammarAccess.getFactoriesAccess().getFactoriesAssignment_2(), "rule__Factories__FactoriesAssignment_2");
					put(grammarAccess.getSingleFactoryAccess().getNameAssignment_0(), "rule__SingleFactory__NameAssignment_0");
					put(grammarAccess.getSingleFactoryAccess().getInputAssignment_2(), "rule__SingleFactory__InputAssignment_2");
					put(grammarAccess.getSingleFactoryAccess().getOutputAssignment_4(), "rule__SingleFactory__OutputAssignment_4");
					put(grammarAccess.getResourcesAccess().getResourcesAssignment_2(), "rule__Resources__ResourcesAssignment_2");
					put(grammarAccess.getSingleResourceAccess().getNameAssignment(), "rule__SingleResource__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
