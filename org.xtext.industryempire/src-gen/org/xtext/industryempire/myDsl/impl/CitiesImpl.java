/**
 * generated by Xtext 2.13.0
 */
package org.xtext.industryempire.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.industryempire.myDsl.Cities;
import org.xtext.industryempire.myDsl.MyDslPackage;
import org.xtext.industryempire.myDsl.SingleBuilding;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Cities</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.industryempire.myDsl.impl.CitiesImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.industryempire.myDsl.impl.CitiesImpl#getX <em>X</em>}</li>
 *   <li>{@link org.xtext.industryempire.myDsl.impl.CitiesImpl#getY <em>Y</em>}</li>
 *   <li>{@link org.xtext.industryempire.myDsl.impl.CitiesImpl#getFactory <em>Factory</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CitiesImpl extends ElementImpl implements Cities
{
  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected EList<String> name;

  /**
   * The default value of the '{@link #getX() <em>X</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getX()
   * @generated
   * @ordered
   */
  protected static final int X_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getX() <em>X</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getX()
   * @generated
   * @ordered
   */
  protected int x = X_EDEFAULT;

  /**
   * The default value of the '{@link #getY() <em>Y</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getY()
   * @generated
   * @ordered
   */
  protected static final int Y_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getY() <em>Y</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getY()
   * @generated
   * @ordered
   */
  protected int y = Y_EDEFAULT;

  /**
   * The cached value of the '{@link #getFactory() <em>Factory</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFactory()
   * @generated
   * @ordered
   */
  protected EList<SingleBuilding> factory;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CitiesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.CITIES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getName()
  {
    if (name == null)
    {
      name = new EDataTypeEList<String>(String.class, this, MyDslPackage.CITIES__NAME);
    }
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getX()
  {
    return x;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setX(int newX)
  {
    int oldX = x;
    x = newX;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CITIES__X, oldX, x));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getY()
  {
    return y;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setY(int newY)
  {
    int oldY = y;
    y = newY;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CITIES__Y, oldY, y));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<SingleBuilding> getFactory()
  {
    if (factory == null)
    {
      factory = new EObjectResolvingEList<SingleBuilding>(SingleBuilding.class, this, MyDslPackage.CITIES__FACTORY);
    }
    return factory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.CITIES__NAME:
        return getName();
      case MyDslPackage.CITIES__X:
        return getX();
      case MyDslPackage.CITIES__Y:
        return getY();
      case MyDslPackage.CITIES__FACTORY:
        return getFactory();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.CITIES__NAME:
        getName().clear();
        getName().addAll((Collection<? extends String>)newValue);
        return;
      case MyDslPackage.CITIES__X:
        setX((Integer)newValue);
        return;
      case MyDslPackage.CITIES__Y:
        setY((Integer)newValue);
        return;
      case MyDslPackage.CITIES__FACTORY:
        getFactory().clear();
        getFactory().addAll((Collection<? extends SingleBuilding>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.CITIES__NAME:
        getName().clear();
        return;
      case MyDslPackage.CITIES__X:
        setX(X_EDEFAULT);
        return;
      case MyDslPackage.CITIES__Y:
        setY(Y_EDEFAULT);
        return;
      case MyDslPackage.CITIES__FACTORY:
        getFactory().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.CITIES__NAME:
        return name != null && !name.isEmpty();
      case MyDslPackage.CITIES__X:
        return x != X_EDEFAULT;
      case MyDslPackage.CITIES__Y:
        return y != Y_EDEFAULT;
      case MyDslPackage.CITIES__FACTORY:
        return factory != null && !factory.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", x: ");
    result.append(x);
    result.append(", y: ");
    result.append(y);
    result.append(')');
    return result.toString();
  }

} //CitiesImpl
