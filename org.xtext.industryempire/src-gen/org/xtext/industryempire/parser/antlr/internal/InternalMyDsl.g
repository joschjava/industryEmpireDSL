/*
 * generated by Xtext 2.13.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.industryempire.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.industryempire.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.industryempire.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ClazzModel";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleClazzModel
entryRuleClazzModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClazzModelRule()); }
	iv_ruleClazzModel=ruleClazzModel
	{ $current=$iv_ruleClazzModel.current; }
	EOF;

// Rule ClazzModel
ruleClazzModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getClazzModelAccess().getElementElementParserRuleCall_0());
			}
			lv_element_0_0=ruleElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getClazzModelRule());
				}
				add(
					$current,
					"element",
					lv_element_0_0,
					"org.xtext.industryempire.MyDsl.Element");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getResourcesParserRuleCall_0());
		}
		this_Resources_0=ruleResources
		{
			$current = $this_Resources_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getFactoriesParserRuleCall_1());
		}
		this_Factories_1=ruleFactories
		{
			$current = $this_Factories_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getVehiclesParserRuleCall_2());
		}
		this_Vehicles_2=ruleVehicles
		{
			$current = $this_Vehicles_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getCitiesParserRuleCall_3());
		}
		this_Cities_3=ruleCities
		{
			$current = $this_Cities_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCities
entryRuleCities returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCitiesRule()); }
	iv_ruleCities=ruleCities
	{ $current=$iv_ruleCities.current; }
	EOF;

// Rule Cities
ruleCities returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Cities:'
		{
			newLeafNode(otherlv_0, grammarAccess.getCitiesAccess().getCitiesKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCitiesAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCitiesRule());
					}
					addWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getCitiesAccess().getLeftSquareBracketKeyword_2());
		}
		otherlv_3='x'
		{
			newLeafNode(otherlv_3, grammarAccess.getCitiesAccess().getXKeyword_3());
		}
		otherlv_4='->'
		{
			newLeafNode(otherlv_4, grammarAccess.getCitiesAccess().getHyphenMinusGreaterThanSignKeyword_4());
		}
		(
			(
				lv_x_5_0=RULE_INT
				{
					newLeafNode(lv_x_5_0, grammarAccess.getCitiesAccess().getXINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCitiesRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getCitiesAccess().getColonKeyword_6());
		}
		otherlv_7='y->'
		{
			newLeafNode(otherlv_7, grammarAccess.getCitiesAccess().getYKeyword_7());
		}
		(
			(
				lv_y_8_0=RULE_INT
				{
					newLeafNode(lv_y_8_0, grammarAccess.getCitiesAccess().getYINTTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCitiesRule());
					}
					setWithLastConsumed(
						$current,
						"y",
						lv_y_8_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_9=':'
		{
			newLeafNode(otherlv_9, grammarAccess.getCitiesAccess().getColonKeyword_9());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCitiesRule());
					}
				}
				otherlv_10=RULE_ID
				{
					newLeafNode(otherlv_10, grammarAccess.getCitiesAccess().getFactorySingleFactoryCrossReference_10_0());
				}
			)
		)*
		(
			otherlv_11=','
			{
				newLeafNode(otherlv_11, grammarAccess.getCitiesAccess().getCommaKeyword_11_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCitiesRule());
						}
					}
					otherlv_12=RULE_ID
					{
						newLeafNode(otherlv_12, grammarAccess.getCitiesAccess().getFactorySingleFactoryCrossReference_11_1_0());
					}
				)
			)
		)*
		otherlv_13=']'
		{
			newLeafNode(otherlv_13, grammarAccess.getCitiesAccess().getRightSquareBracketKeyword_12());
		}
	)
;

// Entry rule entryRuleVehicles
entryRuleVehicles returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVehiclesRule()); }
	iv_ruleVehicles=ruleVehicles
	{ $current=$iv_ruleVehicles.current; }
	EOF;

// Rule Vehicles
ruleVehicles returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Vehicles:'
		{
			newLeafNode(otherlv_0, grammarAccess.getVehiclesAccess().getVehiclesKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVehiclesAccess().getVehiclesAction_1(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVehiclesAccess().getVehiclesSingleVehicleParserRuleCall_2_0());
				}
				lv_vehicles_2_0=ruleSingleVehicle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVehiclesRule());
					}
					add(
						$current,
						"vehicles",
						lv_vehicles_2_0,
						"org.xtext.industryempire.MyDsl.SingleVehicle");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSingleVehicle
entryRuleSingleVehicle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleVehicleRule()); }
	iv_ruleSingleVehicle=ruleSingleVehicle
	{ $current=$iv_ruleSingleVehicle.current; }
	EOF;

// Rule SingleVehicle
ruleSingleVehicle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSingleVehicleAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleVehicleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getSingleVehicleAccess().getLeftSquareBracketKeyword_1());
		}
		otherlv_2='speed'
		{
			newLeafNode(otherlv_2, grammarAccess.getSingleVehicleAccess().getSpeedKeyword_2());
		}
		otherlv_3='->'
		{
			newLeafNode(otherlv_3, grammarAccess.getSingleVehicleAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		(
			(
				lv_speed_4_0=RULE_INT
				{
					newLeafNode(lv_speed_4_0, grammarAccess.getSingleVehicleAccess().getSpeedINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleVehicleRule());
					}
					setWithLastConsumed(
						$current,
						"speed",
						lv_speed_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getSingleVehicleAccess().getColonKeyword_5());
		}
		otherlv_6='load'
		{
			newLeafNode(otherlv_6, grammarAccess.getSingleVehicleAccess().getLoadKeyword_6());
		}
		otherlv_7='->'
		{
			newLeafNode(otherlv_7, grammarAccess.getSingleVehicleAccess().getHyphenMinusGreaterThanSignKeyword_7());
		}
		(
			(
				lv_load_8_0=RULE_INT
				{
					newLeafNode(lv_load_8_0, grammarAccess.getSingleVehicleAccess().getLoadINTTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleVehicleRule());
					}
					setWithLastConsumed(
						$current,
						"load",
						lv_load_8_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_9=':'
		{
			newLeafNode(otherlv_9, grammarAccess.getSingleVehicleAccess().getColonKeyword_9());
		}
		otherlv_10='tankSize'
		{
			newLeafNode(otherlv_10, grammarAccess.getSingleVehicleAccess().getTankSizeKeyword_10());
		}
		otherlv_11='->'
		{
			newLeafNode(otherlv_11, grammarAccess.getSingleVehicleAccess().getHyphenMinusGreaterThanSignKeyword_11());
		}
		(
			(
				lv_tankSize_12_0=RULE_INT
				{
					newLeafNode(lv_tankSize_12_0, grammarAccess.getSingleVehicleAccess().getTankSizeINTTerminalRuleCall_12_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleVehicleRule());
					}
					setWithLastConsumed(
						$current,
						"tankSize",
						lv_tankSize_12_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_13=':'
		{
			newLeafNode(otherlv_13, grammarAccess.getSingleVehicleAccess().getColonKeyword_13());
		}
		otherlv_14='fuelConsumption'
		{
			newLeafNode(otherlv_14, grammarAccess.getSingleVehicleAccess().getFuelConsumptionKeyword_14());
		}
		otherlv_15='->'
		{
			newLeafNode(otherlv_15, grammarAccess.getSingleVehicleAccess().getHyphenMinusGreaterThanSignKeyword_15());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSingleVehicleAccess().getFuelConsumptionDOUBLEParserRuleCall_16_0());
				}
				lv_fuelConsumption_16_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSingleVehicleRule());
					}
					set(
						$current,
						"fuelConsumption",
						lv_fuelConsumption_16_0,
						"org.xtext.industryempire.MyDsl.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_17=']'
		{
			newLeafNode(otherlv_17, grammarAccess.getSingleVehicleAccess().getRightSquareBracketKeyword_17());
		}
	)
;

// Entry rule entryRuleFactories
entryRuleFactories returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactoriesRule()); }
	iv_ruleFactories=ruleFactories
	{ $current=$iv_ruleFactories.current; }
	EOF;

// Rule Factories
ruleFactories returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Factories:'
		{
			newLeafNode(otherlv_0, grammarAccess.getFactoriesAccess().getFactoriesKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFactoriesAccess().getFactoriesAction_1(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFactoriesAccess().getFactoriesSingleFactoryParserRuleCall_2_0());
				}
				lv_factories_2_0=ruleSingleFactory
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactoriesRule());
					}
					add(
						$current,
						"factories",
						lv_factories_2_0,
						"org.xtext.industryempire.MyDsl.SingleFactory");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSingleFactory
entryRuleSingleFactory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleFactoryRule()); }
	iv_ruleSingleFactory=ruleSingleFactory
	{ $current=$iv_ruleSingleFactory.current; }
	EOF;

// Rule SingleFactory
ruleSingleFactory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSingleFactoryAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleFactoryRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getSingleFactoryAccess().getLeftSquareBracketKeyword_1());
		}
		(
			otherlv_2='in'
			{
				newLeafNode(otherlv_2, grammarAccess.getSingleFactoryAccess().getInKeyword_2_0());
			}
			otherlv_3='->'
			{
				newLeafNode(otherlv_3, grammarAccess.getSingleFactoryAccess().getHyphenMinusGreaterThanSignKeyword_2_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSingleFactoryRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getSingleFactoryAccess().getInputSingleResourceCrossReference_2_2_0());
					}
				)
			)
		)?
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getSingleFactoryAccess().getColonKeyword_3());
		}
		(
			otherlv_6='out'
			{
				newLeafNode(otherlv_6, grammarAccess.getSingleFactoryAccess().getOutKeyword_4_0());
			}
			otherlv_7='->'
			{
				newLeafNode(otherlv_7, grammarAccess.getSingleFactoryAccess().getHyphenMinusGreaterThanSignKeyword_4_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSingleFactoryRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getSingleFactoryAccess().getOutputSingleResourceCrossReference_4_2_0());
					}
				)
			)
		)?
		otherlv_9=']'
		{
			newLeafNode(otherlv_9, grammarAccess.getSingleFactoryAccess().getRightSquareBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleResources
entryRuleResources returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResourcesRule()); }
	iv_ruleResources=ruleResources
	{ $current=$iv_ruleResources.current; }
	EOF;

// Rule Resources
ruleResources returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Resources:'
		{
			newLeafNode(otherlv_0, grammarAccess.getResourcesAccess().getResourcesKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getResourcesAccess().getResourcesAction_1(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getResourcesAccess().getResourcesSingleResourceParserRuleCall_2_0());
				}
				lv_resources_2_0=ruleSingleResource
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResourcesRule());
					}
					add(
						$current,
						"resources",
						lv_resources_2_0,
						"org.xtext.industryempire.MyDsl.SingleResource");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSingleResource
entryRuleSingleResource returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleResourceRule()); }
	iv_ruleSingleResource=ruleSingleResource
	{ $current=$iv_ruleSingleResource.current; }
	EOF;

// Rule SingleResource
ruleSingleResource returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSingleResourceAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleResourceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getSingleResourceAccess().getLeftSquareBracketKeyword_1());
		}
		otherlv_2='cost'
		{
			newLeafNode(otherlv_2, grammarAccess.getSingleResourceAccess().getCostKeyword_2());
		}
		otherlv_3='->'
		{
			newLeafNode(otherlv_3, grammarAccess.getSingleResourceAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		(
			(
				lv_cost_4_0=RULE_INT
				{
					newLeafNode(lv_cost_4_0, grammarAccess.getSingleResourceAccess().getCostINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleResourceRule());
					}
					setWithLastConsumed(
						$current,
						"cost",
						lv_cost_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getSingleResourceAccess().getRightSquareBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDOUBLERule()); }
	iv_ruleDOUBLE=ruleDOUBLE
	{ $current=$iv_ruleDOUBLE.current.getText(); }
	EOF;

// Rule DOUBLE
ruleDOUBLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_INT_0=RULE_INT
			{
				$current.merge(this_INT_0);
			}
			{
				newLeafNode(this_INT_0, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_0());
			}
		)+
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDOUBLEAccess().getFullStopKeyword_1());
		}
		(
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_2());
			}
		)+
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
