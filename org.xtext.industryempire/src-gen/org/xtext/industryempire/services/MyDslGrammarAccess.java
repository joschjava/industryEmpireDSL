/*
 * generated by Xtext 2.13.0
 */
package org.xtext.industryempire.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ClazzModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.industryempire.MyDsl.ClazzModel");
		private final Assignment cElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementElementParserRuleCall_0 = (RuleCall)cElementAssignment.eContents().get(0);
		
		////TODO: Only 1 of each element => &
		////TODO: No factory at city
		////Questions: 
		//// Difference between factory = [SingleFactory] and [SingleFactory]
		//// [SingleFactory]* (',' factory+=[SingleFactory])* => Fehler wenn nichts da steht
		//// Vehicle Attributes: Wie attrib -> value :, sodass jedes nur einmal vorkommt?
		//// Wie double richtig schreiben?
		//ClazzModel:
		//	element+=Element*;
		@Override public ParserRule getRule() { return rule; }
		
		//element+=Element*
		public Assignment getElementAssignment() { return cElementAssignment; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_0() { return cElementElementParserRuleCall_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.industryempire.MyDsl.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cResourcesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFactoriesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVehiclesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCitiesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Element:
		//	Resources | Factories | Vehicles | Cities;
		@Override public ParserRule getRule() { return rule; }
		
		//Resources | Factories | Vehicles | Cities
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Resources
		public RuleCall getResourcesParserRuleCall_0() { return cResourcesParserRuleCall_0; }
		
		//Factories
		public RuleCall getFactoriesParserRuleCall_1() { return cFactoriesParserRuleCall_1; }
		
		//Vehicles
		public RuleCall getVehiclesParserRuleCall_2() { return cVehiclesParserRuleCall_2; }
		
		//Cities
		public RuleCall getCitiesParserRuleCall_3() { return cCitiesParserRuleCall_3; }
	}
	public class CitiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.industryempire.MyDsl.Cities");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCitiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cXKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cXAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXINTTerminalRuleCall_4_0 = (RuleCall)cXAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cYKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cYAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cYINTTerminalRuleCall_7_0 = (RuleCall)cYAssignment_7.eContents().get(0);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cFactoryAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cFactorySingleFactoryCrossReference_9_0 = (CrossReference)cFactoryAssignment_9.eContents().get(0);
		private final RuleCall cFactorySingleFactoryIDTerminalRuleCall_9_0_1 = (RuleCall)cFactorySingleFactoryCrossReference_9_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cFactoryAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final CrossReference cFactorySingleFactoryCrossReference_10_1_0 = (CrossReference)cFactoryAssignment_10_1.eContents().get(0);
		private final RuleCall cFactorySingleFactoryIDTerminalRuleCall_10_1_0_1 = (RuleCall)cFactorySingleFactoryCrossReference_10_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Cities:
		//	'Cities:' name=ID '[' 'x->' x=INT ':' 'y->' y=INT ':' factory+=[SingleFactory]* (',' factory+=[SingleFactory])* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'Cities:' name=ID '[' 'x->' x=INT ':' 'y->' y=INT ':' factory+=[SingleFactory]* (',' factory+=[SingleFactory])* ']'
		public Group getGroup() { return cGroup; }
		
		//'Cities:'
		public Keyword getCitiesKeyword_0() { return cCitiesKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//'x->'
		public Keyword getXKeyword_3() { return cXKeyword_3; }
		
		//x=INT
		public Assignment getXAssignment_4() { return cXAssignment_4; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_4_0() { return cXINTTerminalRuleCall_4_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//'y->'
		public Keyword getYKeyword_6() { return cYKeyword_6; }
		
		//y=INT
		public Assignment getYAssignment_7() { return cYAssignment_7; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_7_0() { return cYINTTerminalRuleCall_7_0; }
		
		//':'
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }
		
		//factory+=[SingleFactory]*
		public Assignment getFactoryAssignment_9() { return cFactoryAssignment_9; }
		
		//[SingleFactory]
		public CrossReference getFactorySingleFactoryCrossReference_9_0() { return cFactorySingleFactoryCrossReference_9_0; }
		
		//ID
		public RuleCall getFactorySingleFactoryIDTerminalRuleCall_9_0_1() { return cFactorySingleFactoryIDTerminalRuleCall_9_0_1; }
		
		//(',' factory+=[SingleFactory])*
		public Group getGroup_10() { return cGroup_10; }
		
		//','
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }
		
		//factory+=[SingleFactory]
		public Assignment getFactoryAssignment_10_1() { return cFactoryAssignment_10_1; }
		
		//[SingleFactory]
		public CrossReference getFactorySingleFactoryCrossReference_10_1_0() { return cFactorySingleFactoryCrossReference_10_1_0; }
		
		//ID
		public RuleCall getFactorySingleFactoryIDTerminalRuleCall_10_1_0_1() { return cFactorySingleFactoryIDTerminalRuleCall_10_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_11() { return cRightSquareBracketKeyword_11; }
	}
	public class VehiclesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.industryempire.MyDsl.Vehicles");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVehiclesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cVehiclesAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cVehiclesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVehiclesSingleVehicleCrossReference_2_0 = (CrossReference)cVehiclesAssignment_2.eContents().get(0);
		private final RuleCall cVehiclesSingleVehicleIDTerminalRuleCall_2_0_1 = (RuleCall)cVehiclesSingleVehicleCrossReference_2_0.eContents().get(1);
		
		//Vehicles:
		//	'Vehicles:' {Vehicles} vehicles+=[SingleVehicle]*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Vehicles:' {Vehicles} vehicles+=[SingleVehicle]*
		public Group getGroup() { return cGroup; }
		
		//'Vehicles:'
		public Keyword getVehiclesKeyword_0() { return cVehiclesKeyword_0; }
		
		//{Vehicles}
		public Action getVehiclesAction_1() { return cVehiclesAction_1; }
		
		//vehicles+=[SingleVehicle]*
		public Assignment getVehiclesAssignment_2() { return cVehiclesAssignment_2; }
		
		//[SingleVehicle]
		public CrossReference getVehiclesSingleVehicleCrossReference_2_0() { return cVehiclesSingleVehicleCrossReference_2_0; }
		
		//ID
		public RuleCall getVehiclesSingleVehicleIDTerminalRuleCall_2_0_1() { return cVehiclesSingleVehicleIDTerminalRuleCall_2_0_1; }
	}
	public class SingleVehicleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.industryempire.MyDsl.SingleVehicle");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SingleVehicle:
		//	name=ID
		//	//	values =  '[' 'speed' '->' speed = INT ':'
		//	//					'load' '->' load = INT ':'
		//	//					'tankSize' '->' tankSize = INT ':'
		//	//					'fuelConsumption' '->' fuelConsumption = DOUBLE
		//	//	 				']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class FactoriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.industryempire.MyDsl.Factories");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFactoriesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cFactoriesAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cFactoriesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFactoriesSingleFactoryParserRuleCall_2_0 = (RuleCall)cFactoriesAssignment_2.eContents().get(0);
		
		////Vehicles:
		////	'Vehicles:'
		// //	name = STRING '[' attrib += VehicleAttributes '->' value = INT ']'
		// //;
		// //
		////VehicleAttributes:
		////	'speed' & 'load' & 'tankSize' & 'fuelConsumption'
		////;
		//Factories:
		//	'Factories:' {Factories} factories+=SingleFactory*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Factories:' {Factories} factories+=SingleFactory*
		public Group getGroup() { return cGroup; }
		
		//'Factories:'
		public Keyword getFactoriesKeyword_0() { return cFactoriesKeyword_0; }
		
		//{Factories}
		public Action getFactoriesAction_1() { return cFactoriesAction_1; }
		
		//factories+=SingleFactory*
		public Assignment getFactoriesAssignment_2() { return cFactoriesAssignment_2; }
		
		//SingleFactory
		public RuleCall getFactoriesSingleFactoryParserRuleCall_2_0() { return cFactoriesSingleFactoryParserRuleCall_2_0; }
	}
	public class SingleFactoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.industryempire.MyDsl.SingleFactory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInputSingleResourceCrossReference_2_0 = (CrossReference)cInputAssignment_2.eContents().get(0);
		private final RuleCall cInputSingleResourceIDTerminalRuleCall_2_0_1 = (RuleCall)cInputSingleResourceCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOutputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cOutputSingleResourceCrossReference_4_0 = (CrossReference)cOutputAssignment_4.eContents().get(0);
		private final RuleCall cOutputSingleResourceIDTerminalRuleCall_4_0_1 = (RuleCall)cOutputSingleResourceCrossReference_4_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SingleFactory:
		//	name=ID '[' input=[SingleResource]? ':' output=[SingleResource]? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '[' input=[SingleResource]? ':' output=[SingleResource]? ']'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//input=[SingleResource]?
		public Assignment getInputAssignment_2() { return cInputAssignment_2; }
		
		//[SingleResource]
		public CrossReference getInputSingleResourceCrossReference_2_0() { return cInputSingleResourceCrossReference_2_0; }
		
		//ID
		public RuleCall getInputSingleResourceIDTerminalRuleCall_2_0_1() { return cInputSingleResourceIDTerminalRuleCall_2_0_1; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//output=[SingleResource]?
		public Assignment getOutputAssignment_4() { return cOutputAssignment_4; }
		
		//[SingleResource]
		public CrossReference getOutputSingleResourceCrossReference_4_0() { return cOutputSingleResourceCrossReference_4_0; }
		
		//ID
		public RuleCall getOutputSingleResourceIDTerminalRuleCall_4_0_1() { return cOutputSingleResourceIDTerminalRuleCall_4_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class ResourcesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.industryempire.MyDsl.Resources");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourcesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cResourcesAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cResourcesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResourcesSingleResourceParserRuleCall_2_0 = (RuleCall)cResourcesAssignment_2.eContents().get(0);
		
		//Resources:
		//	'Resources:' {Resources} resources+=SingleResource*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Resources:' {Resources} resources+=SingleResource*
		public Group getGroup() { return cGroup; }
		
		//'Resources:'
		public Keyword getResourcesKeyword_0() { return cResourcesKeyword_0; }
		
		//{Resources}
		public Action getResourcesAction_1() { return cResourcesAction_1; }
		
		//resources+=SingleResource*
		public Assignment getResourcesAssignment_2() { return cResourcesAssignment_2; }
		
		//SingleResource
		public RuleCall getResourcesSingleResourceParserRuleCall_2_0() { return cResourcesSingleResourceParserRuleCall_2_0; }
	}
	public class SingleResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.industryempire.MyDsl.SingleResource");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SingleResource:
		//	name=ID //'[cost:' cost = INT ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////Two words not possible, how do i let it wait for [
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.industryempire.MyDsl.DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDigitZeroKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDigitOneKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cDigitTwoKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cDigitThreeKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cDigitFourKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cDigitFiveKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cDigitSixKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Keyword cDigitSevenKeyword_0_7 = (Keyword)cAlternatives_0.eContents().get(7);
		private final Keyword cDigitEightKeyword_0_8 = (Keyword)cAlternatives_0.eContents().get(8);
		private final Keyword cDigitNineKeyword_0_9 = (Keyword)cAlternatives_0.eContents().get(9);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cDigitZeroKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cDigitOneKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cDigitTwoKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cDigitThreeKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		private final Keyword cDigitFourKeyword_2_4 = (Keyword)cAlternatives_2.eContents().get(4);
		private final Keyword cDigitFiveKeyword_2_5 = (Keyword)cAlternatives_2.eContents().get(5);
		private final Keyword cDigitSixKeyword_2_6 = (Keyword)cAlternatives_2.eContents().get(6);
		private final Keyword cDigitSevenKeyword_2_7 = (Keyword)cAlternatives_2.eContents().get(7);
		private final Keyword cDigitEightKeyword_2_8 = (Keyword)cAlternatives_2.eContents().get(8);
		private final Keyword cDigitNineKeyword_2_9 = (Keyword)cAlternatives_2.eContents().get(9);
		
		//DOUBLE:
		//	('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'
		//	| '9')+;
		@Override public ParserRule getRule() { return rule; }
		
		//('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' |
		//'9')+
		public Group getGroup() { return cGroup; }
		
		//('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'0'
		public Keyword getDigitZeroKeyword_0_0() { return cDigitZeroKeyword_0_0; }
		
		//'1'
		public Keyword getDigitOneKeyword_0_1() { return cDigitOneKeyword_0_1; }
		
		//'2'
		public Keyword getDigitTwoKeyword_0_2() { return cDigitTwoKeyword_0_2; }
		
		//'3'
		public Keyword getDigitThreeKeyword_0_3() { return cDigitThreeKeyword_0_3; }
		
		//'4'
		public Keyword getDigitFourKeyword_0_4() { return cDigitFourKeyword_0_4; }
		
		//'5'
		public Keyword getDigitFiveKeyword_0_5() { return cDigitFiveKeyword_0_5; }
		
		//'6'
		public Keyword getDigitSixKeyword_0_6() { return cDigitSixKeyword_0_6; }
		
		//'7'
		public Keyword getDigitSevenKeyword_0_7() { return cDigitSevenKeyword_0_7; }
		
		//'8'
		public Keyword getDigitEightKeyword_0_8() { return cDigitEightKeyword_0_8; }
		
		//'9'
		public Keyword getDigitNineKeyword_0_9() { return cDigitNineKeyword_0_9; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'0'
		public Keyword getDigitZeroKeyword_2_0() { return cDigitZeroKeyword_2_0; }
		
		//'1'
		public Keyword getDigitOneKeyword_2_1() { return cDigitOneKeyword_2_1; }
		
		//'2'
		public Keyword getDigitTwoKeyword_2_2() { return cDigitTwoKeyword_2_2; }
		
		//'3'
		public Keyword getDigitThreeKeyword_2_3() { return cDigitThreeKeyword_2_3; }
		
		//'4'
		public Keyword getDigitFourKeyword_2_4() { return cDigitFourKeyword_2_4; }
		
		//'5'
		public Keyword getDigitFiveKeyword_2_5() { return cDigitFiveKeyword_2_5; }
		
		//'6'
		public Keyword getDigitSixKeyword_2_6() { return cDigitSixKeyword_2_6; }
		
		//'7'
		public Keyword getDigitSevenKeyword_2_7() { return cDigitSevenKeyword_2_7; }
		
		//'8'
		public Keyword getDigitEightKeyword_2_8() { return cDigitEightKeyword_2_8; }
		
		//'9'
		public Keyword getDigitNineKeyword_2_9() { return cDigitNineKeyword_2_9; }
	}
	
	
	private final ClazzModelElements pClazzModel;
	private final ElementElements pElement;
	private final CitiesElements pCities;
	private final VehiclesElements pVehicles;
	private final SingleVehicleElements pSingleVehicle;
	private final FactoriesElements pFactories;
	private final SingleFactoryElements pSingleFactory;
	private final ResourcesElements pResources;
	private final SingleResourceElements pSingleResource;
	private final DOUBLEElements pDOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pClazzModel = new ClazzModelElements();
		this.pElement = new ElementElements();
		this.pCities = new CitiesElements();
		this.pVehicles = new VehiclesElements();
		this.pSingleVehicle = new SingleVehicleElements();
		this.pFactories = new FactoriesElements();
		this.pSingleFactory = new SingleFactoryElements();
		this.pResources = new ResourcesElements();
		this.pSingleResource = new SingleResourceElements();
		this.pDOUBLE = new DOUBLEElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.industryempire.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////TODO: Only 1 of each element => &
	////TODO: No factory at city
	////Questions: 
	//// Difference between factory = [SingleFactory] and [SingleFactory]
	//// [SingleFactory]* (',' factory+=[SingleFactory])* => Fehler wenn nichts da steht
	//// Vehicle Attributes: Wie attrib -> value :, sodass jedes nur einmal vorkommt?
	//// Wie double richtig schreiben?
	//ClazzModel:
	//	element+=Element*;
	public ClazzModelElements getClazzModelAccess() {
		return pClazzModel;
	}
	
	public ParserRule getClazzModelRule() {
		return getClazzModelAccess().getRule();
	}
	
	//Element:
	//	Resources | Factories | Vehicles | Cities;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Cities:
	//	'Cities:' name=ID '[' 'x->' x=INT ':' 'y->' y=INT ':' factory+=[SingleFactory]* (',' factory+=[SingleFactory])* ']';
	public CitiesElements getCitiesAccess() {
		return pCities;
	}
	
	public ParserRule getCitiesRule() {
		return getCitiesAccess().getRule();
	}
	
	//Vehicles:
	//	'Vehicles:' {Vehicles} vehicles+=[SingleVehicle]*;
	public VehiclesElements getVehiclesAccess() {
		return pVehicles;
	}
	
	public ParserRule getVehiclesRule() {
		return getVehiclesAccess().getRule();
	}
	
	//SingleVehicle:
	//	name=ID
	//	//	values =  '[' 'speed' '->' speed = INT ':'
	//	//					'load' '->' load = INT ':'
	//	//					'tankSize' '->' tankSize = INT ':'
	//	//					'fuelConsumption' '->' fuelConsumption = DOUBLE
	//	//	 				']'
	//;
	public SingleVehicleElements getSingleVehicleAccess() {
		return pSingleVehicle;
	}
	
	public ParserRule getSingleVehicleRule() {
		return getSingleVehicleAccess().getRule();
	}
	
	////Vehicles:
	////	'Vehicles:'
	// //	name = STRING '[' attrib += VehicleAttributes '->' value = INT ']'
	// //;
	// //
	////VehicleAttributes:
	////	'speed' & 'load' & 'tankSize' & 'fuelConsumption'
	////;
	//Factories:
	//	'Factories:' {Factories} factories+=SingleFactory*;
	public FactoriesElements getFactoriesAccess() {
		return pFactories;
	}
	
	public ParserRule getFactoriesRule() {
		return getFactoriesAccess().getRule();
	}
	
	//SingleFactory:
	//	name=ID '[' input=[SingleResource]? ':' output=[SingleResource]? ']';
	public SingleFactoryElements getSingleFactoryAccess() {
		return pSingleFactory;
	}
	
	public ParserRule getSingleFactoryRule() {
		return getSingleFactoryAccess().getRule();
	}
	
	//Resources:
	//	'Resources:' {Resources} resources+=SingleResource*;
	public ResourcesElements getResourcesAccess() {
		return pResources;
	}
	
	public ParserRule getResourcesRule() {
		return getResourcesAccess().getRule();
	}
	
	//SingleResource:
	//	name=ID //'[cost:' cost = INT ']'
	//;
	public SingleResourceElements getSingleResourceAccess() {
		return pSingleResource;
	}
	
	public ParserRule getSingleResourceRule() {
		return getSingleResourceAccess().getRule();
	}
	
	//DOUBLE:
	//	('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'
	//	| '9')+;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
